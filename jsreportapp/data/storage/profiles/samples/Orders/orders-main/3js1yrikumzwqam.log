{"type":"operationStart","subtype":"profile","data":{"_id":"zWAeIASgtXFOPET0","timestamp":"2023-01-16T20:37:29.951Z","state":"queued","mode":"full","creationDate":"2023-01-16T20:37:29.955Z","modificationDate":"2023-01-16T20:37:29.955Z","shortid":"hdmdVOu","$entitySet":"profiles"},"doDiffs":false,"timestamp":1673901449953,"id":"9tmgelss7cmwtm8","previousOperationId":null,"operationId":"hox2cxhyk8zfkb0"}
{"type":"log","level":"info","message":"Render request 3 queued for execution and waiting for available worker","previousOperationId":"hox2cxhyk8zfkb0","timestamp":1673901449953,"id":"dn8mof2quzd0ncq"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"hox2cxhyk8zfkb0","timestamp":1673901449970,"id":"leo3mbfbcm2ykna","previousEventId":"9tmgelss7cmwtm8","operationId":"obx5nraujwp0tx1","res":{"content":null,"meta":{"diff":"Index: resMeta\n===================================================================\n--- resMeta\n+++ resMeta\n@@ -1,0 +1,1 @@\n\\ No newline at end of file\n+{}\n\\ No newline at end of file\n"}},"req":{"diff":"Index: req\n===================================================================\n--- req\n+++ req\n@@ -1,0 +1,46 @@\n\\ No newline at end of file\n+{\n+  \"template\": {\n+    \"name\": \"orders-main\",\n+    \"recipe\": \"chrome-pdf\",\n+    \"shortid\": \"HJH11D83ce\",\n+    \"folder\": {\n+      \"shortid\": \"erkLzi\"\n+    },\n+    \"engine\": \"handlebars\",\n+    \"scripts\": [\n+      {\n+        \"name\": \"orders-script\",\n+        \"shortid\": \"BJX1Jw82ce\",\n+        \"folder\": {\n+          \"shortid\": \"erkLzi\"\n+        },\n+        \"_id\": \"joYjPdEqXKqYEc12\",\n+        \"__entitySet\": \"scripts\",\n+        \"__name\": \"orders-script\"\n+      }\n+    ],\n+    \"chrome\": {\n+      \"printBackground\": true,\n+      \"marginTop\": \"4cm\",\n+      \"marginRight\": \"1.5cm\",\n+      \"marginBottom\": \"1.5cm\",\n+      \"marginLeft\": \"1.5cm\",\n+      \"waitForJS\": false,\n+      \"headerTemplate\": \"\",\n+      \"footerTemplate\": \"\"\n+    },\n+    \"pdfOperations\": [\n+      {\n+        \"type\": \"merge\",\n+        \"templateShortid\": \"SJVbqZr9f\",\n+        \"renderForEveryPage\": false,\n+        \"mergeWholeDocument\": true\n+      }\n+    ],\n+    \"content\": \"<!--\\nMore complex example demonstrating advanced features like\\n- using custom server script to fetch remote data\\n- using custom modules in safe sandbox\\n- painting a chart\\n- using global helpers\\n- merging custom dynamic header document\\n\\nNote: This example requires jsreport to be configured with\\n{ \\\"trustUserCode\\\": true } or\\n{ \\\"sandbox\\\": { \\\"allowedModules\\\": [\\\"https\\\"] } }\\n!-->\\n<html>\\n  <head>\\n    <meta content=\\\"text/html; charset=utf-8\\\" http-equiv=\\\"Content-Type\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/metro/4.1.5/css/metro.min.css\\\">\\n    <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js'></script>\\n  </head>\\n  <body>\\n    {{#each orders}}\\n        <!-- add hiden information to the page which is resolved in OrdersHeader template\\n             during the pdf merge. See the docs about pdf utils extension for more details. -->\\n        {{{pdfCreatePagesGroup country}}}\\n        <canvas id='orders{{country}}' style=\\\"margin-bottom:30px\\\"></canvas>\\n        <table class='table striped'>\\n            <thead>\\n                <tr>\\n                    <th>OrderID</th>\\n                    <th>ShipAddress</th>\\n                    <th>ShipCity</th>\\n                    <th>ShipCountry</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                {{#each rows}}\\n                <tr>\\n                    <td>{{OrderID}}</td>\\n                    <td>{{ShipAddress}}</td>\\n                    <td>{{ShipCity}}</td>\\n                    <td>{{ShipCountry}}</td>\\n                </tr>\\n                {{/each}}\\n            </tbody>\\n        </table>\\n\\n        <script>\\n            // convert data into js string using function from asset global helpers.js\\n            // this results into something like var data = { \\\"a\\\": \\\"foo\\\" }\\n            // which gets afterwards interpreted in chrome into object\\n            var data = {{{toJS accumulated}}}\\n\\n            Chart.defaults.global.legend.display = false;\\n\\n            new Chart(orders{{country}}.getContext(\\\"2d\\\"), {\\n                type: 'bar',\\n                data: {\\n                    labels: Object.keys(data),\\n                    datasets: [{\\n                        fillColor: 'blue',\\n                        label: \\\"Orders in time\\\",\\n                        backgroundColor: \\\"rgba(27,161,226,0.2)\\\",\\n                        borderColor: \\\"rgba(27,161,226,1)\\\",\\n                        borderWidth: 1,\\n                        hoverBackgroundColor: \\\"rgba(27,161,226,0.4)\\\",\\n                        hoverBorderColor: \\\"rgba(27,161,226,1)\\\",\\n                        data: Object.keys(data).map(function (o) {\\n                            return data[o].value;\\n                        })\\n                    }]\\n                },\\n                options: {\\n                    animation: {\\n                        duration: 0\\n                    }\\n                }\\n            });\\n        </script>\\n        <div style='page-break-after: always;'>\\n        </div>\\n    {{/each}}\\n  </body>\\n</html>\\n\",\n+    \"helpers\": \"\",\n+    \"creationDate\": \"2023-01-16T20:11:53.525Z\",\n+    \"modificationDate\": \"2023-01-16T20:11:53.525Z\"\n+  },\n+  \"data\": {}\n+}\n\\ No newline at end of file\n"}}
{"type":"log","timestamp":1673901449971,"level":"info","message":"Starting rendering request 3","meta":{"rootId":"3js1yrikumzwqam","id":"3js1yrikumzwqam"},"id":"f03z2sbmg7i0rkt","previousOperationId":"obx5nraujwp0tx1"}
{"type":"log","timestamp":1673901449971,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"3js1yrikumzwqam","id":"3js1yrikumzwqam"},"id":"pep31e0oscst4tt","previousOperationId":"obx5nraujwp0tx1"}
{"type":"log","timestamp":1673901449975,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"3js1yrikumzwqam","id":"3js1yrikumzwqam"},"id":"n5dwz9hpzxaivkq","previousOperationId":"obx5nraujwp0tx1"}
{"type":"log","timestamp":1673901449983,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"3js1yrikumzwqam","id":"3js1yrikumzwqam"},"id":"mq7ude1fg6zxknx","previousOperationId":"obx5nraujwp0tx1"}
{"type":"log","timestamp":1673901450008,"level":"warn","message":"Error when processing render request 3\n(because) error when evaluating custom script /samples/Orders/orders-script\nrequire of \"https\" module has been blocked. To be able to require custom modules you need to add to configuration { \"trustUserCode\": true } or enable just specific module using { sandbox: { allowedModules\": [\"https\"] }\n\n(sandbox.js line 2:15)\n\n  1 | // server side script fetching remote data and preparing report data source\n> 2 | const https = require('https');\n    |               ^\n  3 |\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n\n(sandbox.js line 55:108)\n\n  53 | }\n\n\nError: require of \"https\" module has been blocked. To be able to require custom modules you need to add to configuration { \"trustUserCode\": true } or enable just specific module using { sandbox: { allowedModules\": [\"https\"] }\n    at _require (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:79:19)\n    at require (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:112:21)\n    at VM2 Wrapper.apply (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\vm2\\lib/bridge.js:485:11)\n    at sandbox.js:2:15\n    at sandbox.js:55:108\n    at Script.runInContext (node:vm:141:12)\n    at VM.runScript (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\vm2\\lib\\vm.js:285:18)\n    at VM.run (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\vm2\\lib\\vm.js:503:16)\n    at run (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:173:25)\n    at run (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:184:30)","meta":{"rootId":"3js1yrikumzwqam","id":"3js1yrikumzwqam"},"id":"99zjhgj2g2gixuw","previousOperationId":"obx5nraujwp0tx1"}
{"type":"log","timestamp":1673901450009,"level":"warn","message":"Rendering request 3 finished with error in 58 ms","meta":{"rootId":"3js1yrikumzwqam","id":"3js1yrikumzwqam"},"id":"66nbcxmic120m9k","previousOperationId":"obx5nraujwp0tx1"}
{"type":"error","timestamp":1673901450020,"statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 2:15)\n\n  1 | // server side script fetching remote data and preparing report data source\n> 2 | const https = require('https');\n    |               ^\n  3 |\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n\n(sandbox.js line 55:108)\n\n  53 | }\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst https = require('https');\n\n// call remote http rest api\nfunction fetchOrders() {\n    return new Promise((resolve, reject) => {\n        https.get('https://services.odata.org/V4/Northwind/Northwind.svc/Orders',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        });\n    })\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const orders = await fetchOrders()\n    const ordersByShipCountry = orders.reduce((a, v) => {\n        a[v.ShipCountry] = a[v.ShipCountry] || []\n        a[v.ShipCountry].push(v)\n        return a\n    }, {})\n\n    return Object.keys(ordersByShipCountry).map((country) => {\n        const ordersInCountry = ordersByShipCountry[country]\n\n        const accumulated = {}\n\n        ordersInCountry.forEach((o) => {\n            o.OrderDate = new Date(o.OrderDate);\n            const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                orderDate: o.OrderDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: ordersInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"obx5nraujwp0tx1","id":"dcgjhdd30cbt5tp","stack":"Error: require of \"https\" module has been blocked. To be able to require custom modules you need to add to configuration { \"trustUserCode\": true } or enable just specific module using { sandbox: { allowedModules\": [\"https\"] }\n    at _require (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:79:19)\n    at require (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:112:21)\n    at VM2 Wrapper.apply (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\vm2\\lib/bridge.js:485:11)\n    at sandbox.js:2:15\n    at sandbox.js:55:108\n    at Script.runInContext (node:vm:141:12)\n    at VM.runScript (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\vm2\\lib\\vm.js:285:18)\n    at VM.run (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\vm2\\lib\\vm.js:503:16)\n    at run (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:173:25)\n    at run (C:\\Users\\Johan\\Desktop\\clases\\Proyecto\\Calendar-Event\\jsreportapp\\node_modules\\@jsreport\\jsreport-core\\lib\\worker\\sandbox\\createSandbox.js:184:30)","message":"Error when evaluating custom script /samples/Orders/orders-script\nrequire of \"https\" module has been blocked. To be able to require custom modules you need to add to configuration { \"trustUserCode\": true } or enable just specific module using { sandbox: { allowedModules\": [\"https\"] }\n\n(sandbox.js line 2:15)\n\n  1 | // server side script fetching remote data and preparing report data source\n> 2 | const https = require('https');\n    |               ^\n  3 |\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n\n(sandbox.js line 55:108)\n\n  53 | }\n\n"}
